package com.emerlet.dao;

import java.sql.*;
import java.sql.Date;
import java.util.*;

import com.emerlet.db.ConnectionProvider;
import com.emerlet.vo.ToiletVO;

import java.io.BufferedReader;
import java.io.FileReader;


public class ToiletDAO {

    public void setupDB(String csvPath) {
        try (Connection conn = ConnectionProvider.getConnection()) {
            Statement stmt = conn.createStatement();
            try {
                stmt.executeUpdate("DROP TABLE toilets PURGE");
            } catch (SQLException ignore) {}

            stmt.executeUpdate("CREATE TABLE toilets ("
                + "toilet_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,"
                + "name VARCHAR2(255) NOT NULL,"
                + "address_road VARCHAR2(500),"
                + "address_lot VARCHAR2(500),"
                + "lat NUMBER(9,6) NOT NULL,"
                + "lng NUMBER(9,6) NOT NULL,"
                + "male_toilet NUMBER DEFAULT 0,"
                + "male_urinal NUMBER DEFAULT 0,"
                + "male_disabled_toilet NUMBER DEFAULT 0,"
                + "male_disabled_urinal NUMBER DEFAULT 0,"
                + "male_child_toilet NUMBER DEFAULT 0,"
                + "male_child_urinal NUMBER DEFAULT 0,"
                + "female_toilet NUMBER DEFAULT 0,"
                + "female_disabled_toilet NUMBER DEFAULT 0,"
                + "female_child_toilet NUMBER DEFAULT 0,"
                + "phone_number VARCHAR2(50),"
                + "open_time_detail VARCHAR2(100),"
                + "has_emergency_bell NUMBER(1) DEFAULT 0,"
                + "emergency_bell_location VARCHAR2(100),"
                + "has_cctv NUMBER(1) DEFAULT 0,"
                + "has_diaper_table NUMBER(1) DEFAULT 0,"
                + "diaper_table_location VARCHAR2(100),"
                + "data_reference_date DATE"
                + ")");

            String sql = "INSERT INTO toilets ("
                    + "name, address_road, address_lot, male_toilet, male_urinal, male_disabled_toilet,"
                    + "male_disabled_urinal, male_child_toilet, male_child_urinal, female_toilet,"
                    + "female_disabled_toilet, female_child_toilet, phone_number, open_time_detail, lat, lng,"
                    + "has_emergency_bell, emergency_bell_location, has_cctv, has_diaper_table, diaper_table_location,"
                    + "data_reference_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            PreparedStatement pstmt = conn.prepareStatement(sql);
            BufferedReader br = new BufferedReader(new FileReader(csvPath));
            String line;
            int lineNum = 0;

            while ((line = br.readLine()) != null) {
                lineNum++;
                if (lineNum == 1) continue;

                String[] t = line.split(",", -1);
                try {
                    String name = t[3].trim();
                    String address_road = t[4].trim();
                    String address_lot = t[5].trim();
                    String latStr = t[20].trim();
                    String lngStr = t[21].trim();

                    if (latStr.isEmpty() || lngStr.isEmpty() ||
                        !latStr.matches("-?\\d+(\\.\\d+)?") || !lngStr.matches("-?\\d+(\\.\\d+)?")) {
                        continue;
                    }

                    double lat = Double.parseDouble(latStr);
                    double lng = Double.parseDouble(lngStr);

                    pstmt.setString(1, name);
                    pstmt.setString(2, address_road);
                    pstmt.setString(3, address_lot);
                    pstmt.setInt(4, parseOrZero(t[6]));
                    pstmt.setInt(5, parseOrZero(t[7]));
                    pstmt.setInt(6, parseOrZero(t[8]));
                    pstmt.setInt(7, parseOrZero(t[9]));
                    pstmt.setInt(8, parseOrZero(t[10]));
                    pstmt.setInt(9, parseOrZero(t[11]));
                    pstmt.setInt(10, parseOrZero(t[12]));
                    pstmt.setInt(11, parseOrZero(t[13]));
                    pstmt.setInt(12, parseOrZero(t[14]));
                    pstmt.setString(13, t[16].trim());
                    pstmt.setString(14, t[18].trim());
                    pstmt.setDouble(15, lat);
                    pstmt.setDouble(16, lng);
                    pstmt.setInt(17, "Y".equalsIgnoreCase(t[25].trim()) ? 1 : 0);
                    pstmt.setString(18, t[26].trim());
                    pstmt.setInt(19, "Y".equalsIgnoreCase(t[27].trim()) ? 1 : 0);
                    pstmt.setInt(20, "Y".equalsIgnoreCase(t[28].trim()) ? 1 : 0);
                    pstmt.setString(21, t[29].trim());

                    String dateStr = t[31].trim();
                    Date refDate = null;
                    if (!dateStr.isEmpty()) {
                        refDate = Date.valueOf(dateStr);
                    }
                    pstmt.setDate(22, refDate);
                    pstmt.executeUpdate();
                } catch (Exception e) {
                    System.err.println("[CSV 오류] 라인 " + lineNum + ": " + e.getMessage());
                }
            }
            br.close();
            System.out.println("테이블 생성 및 데이터 삽입 완료");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private int parseOrZero(String value) {
        try {
            return value.trim().isEmpty() ? 0 : Integer.parseInt(value.trim());
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    public ArrayList<ToiletVO> findAll() {
	    ArrayList<ToiletVO> toilets = new ArrayList<>();

	    String sql = "SELECT name, address_road, address_lot, " +
	               "male_toilet, male_urinal, male_disabled_toilet, male_disabled_urinal, " +
	               "male_child_toilet, male_child_urinal, " +
	               "female_toilet, female_disabled_toilet, female_child_toilet, " +
	               "phone_number, open_time_detail, " +
	               "lat, lng, " +
	               "has_emergency_bell, emergency_bell_location, " +
	               "has_cctv, has_diaper_table, diaper_table_location, data_reference_date " +
	               "FROM toilets";

	    try (Connection conn = ConnectionProvider.getConnection();
	         PreparedStatement pstmt = conn.prepareStatement(sql);
	         ResultSet rs = pstmt.executeQuery()) {

	        while (rs.next()) {
	            ToiletVO toilet = new ToiletVO();
	            toilet.setName(rs.getString("name"));
	            toilet.setAddressRoad(rs.getString("address_road"));
	            toilet.setAddressLot(rs.getString("address_lot"));
	            toilet.setMaleToilet(rs.getInt("male_toilet"));
	            toilet.setMaleUrinal(rs.getInt("male_urinal"));
	            toilet.setMaleDisabledToilet(rs.getInt("male_disabled_toilet"));
	            toilet.setMaleDisabledUrinal(rs.getInt("male_disabled_urinal"));
	            toilet.setMaleChildToilet(rs.getInt("male_child_toilet"));
	            toilet.setMaleChildUrinal(rs.getInt("male_child_urinal"));
	            toilet.setFemaleToilet(rs.getInt("female_toilet"));
	            toilet.setFemaleDisabledToilet(rs.getInt("female_disabled_toilet"));
	            toilet.setFemaleChildToilet(rs.getInt("female_child_toilet"));
	            toilet.setPhoneNumber(rs.getString("phone_number"));
	            toilet.setOpenTimeDetail(rs.getString("open_time_detail"));
	            toilet.setLat(rs.getDouble("lat"));
	            toilet.setLng(rs.getDouble("lng"));
	            toilet.setHasEmergencyBell(rs.getInt("has_emergency_bell"));
	            toilet.setEmergencyBellLocation(rs.getString("emergency_bell_location"));
	            toilet.setHasCctv(rs.getInt("has_cctv"));
	            toilet.setHasDiaperTable(rs.getInt("has_diaper_table"));
	            toilet.setDiaperTableLocation(rs.getString("diaper_table_location"));
	            toilet.setDataReferenceDate(rs.getDate("data_reference_date"));

	            toilets.add(toilet);
	        }

	        System.out.println("DAO 실행됨");
	        System.out.println("총 개수: " + toilets.size());
	        ConnectionProvider.close(conn, pstmt, rs);

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return toilets;
	}
}



